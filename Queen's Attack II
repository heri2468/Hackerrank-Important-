def queensAttack(n, k, r_q, c_q, obstacles):
        #no obstacles
        left = c_q-1   #moves left from the position
        right = n-c_q
        up = n-r_q
        down= r_q-1

        upleft = left if left<=up else up
        upright = right if right<=up else up
        downleft = left if left<=down else down
        downright = right if right<=down else down
        
        #if obstacles
        for obst in obstacles:
                row = obst[0]
                col = obst[1]

                if row==r_q and col<c_q:
                        if c_q-col-1<left:
                                left=c_q-col-1
                elif row==r_q and col>c_q:
                        if col-c_q-1<right:
                                right= col-c_q-1
                elif col==c_q and row>r_q:
                        if row-r_q-1<up:
                                up=row-r_q-1
                elif col==c_q and row<r_q:
                        if r_q-row-1<down:
                                down=r_q-row-1

                elif row>r_q and col<c_q:
                        if row-r_q==c_q-col:
                                if row-r_q-1<upleft:
                                        upleft=row-r_q-1
                elif row>r_q and col>c_q:
                        if row-r_q==col-c_q:
                                if row-r_q-1<upright:
                                        upright=row-r_q-1
                elif row<r_q and col<c_q:
                        if r_q-row==c_q-col:
                                if r_q-row-1<downleft:
                                        downleft=r_q-row-1
                elif row<r_q and col>c_q:
                        if r_q-row==col-c_q:
                                if r_q-row-1<downright:
                                        downright=r_q-row-1
        attack = left + right+up+down+ downright+downleft + upleft + upright
        return attack
