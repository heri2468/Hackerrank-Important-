#include <bits/stdc++.h>

using namespace std;
class Node
{
    public:
    int data;
    Node *left;
    Node *right;
    Node(int x)
    {
        left = NULL;
        right = NULL;
        data = x;
    }
};
Node* swapit(Node* root, int k)
{
    queue<Node *>que;
    que.push(root);
    que.push(NULL);
    Node *temp;
    Node *s;
    int level=1;
    while(!que.empty())
    {
        temp = que.front();
        que.pop();
        if(temp == NULL)
        {
            if(que.empty())
                break;
            level++;
            que.push(NULL);
        }
        else
        {
            if((level%k==0)&&((temp->left!=NULL)||(temp->right!=NULL)))
            {
                s = temp->left;
                temp->left = temp->right;
                temp->right = s;
            }
            if(temp->left!=NULL)
            que.push(temp->left);
            if(temp->right!=NULL)
            que.push(temp->right);
        }
    }
    return root;
}
void inorder(Node * root, vector<int>& treeArray)
{
    if(!root)
        return;
    inorder(root->left, treeArray);
    treeArray.push_back(root->data);
    inorder(root->right, treeArray);
}
/*
 * Complete the swapNodes function below.
 */
vector<vector<int>> swapNodes(vector<vector<int>> indexes, vector<int> queries) {
    
     // Write your code here.
Node *root = new Node(1);
    Node *temp;
    queue<Node *> que;
    que.push(root);
    for(int i=0;i<indexes.size();i++)
    {
        temp = que.front();
        que.pop();
        if(indexes[i][0]!=-1)
        {
            Node *newnode = new Node(indexes[i][0]);
            temp->left = newnode;
            que.push(newnode);
        }
        if(indexes[i][1]!=-1)
        {
            Node *newnode = new Node(indexes[i][1]);
            temp->right = newnode;
            que.push(newnode);
        }
        
    }
    vector<vector<int> > soln;
    for(auto& q:queries)
    {
        root = swapit(root,q);
        vector<int> treeArray;
        inorder(root, treeArray);
        soln.push_back(treeArray);
    }
    return soln;

}

int main()
{
    ofstream fout(getenv("OUTPUT_PATH"));

    int n;
    cin >> n;
    cin.ignore(numeric_limits<streamsize>::max(), '\n');

    vector<vector<int>> indexes(n);
    for (int indexes_row_itr = 0; indexes_row_itr < n; indexes_row_itr++) {
        indexes[indexes_row_itr].resize(2);

        for (int indexes_column_itr = 0; indexes_column_itr < 2; indexes_column_itr++) {
            cin >> indexes[indexes_row_itr][indexes_column_itr];
        }

        cin.ignore(numeric_limits<streamsize>::max(), '\n');
    }

    int queries_count;
    cin >> queries_count;
    cin.ignore(numeric_limits<streamsize>::max(), '\n');

    vector<int> queries(queries_count);

    for (int queries_itr = 0; queries_itr < queries_count; queries_itr++) {
        int queries_item;
        cin >> queries_item;
        cin.ignore(numeric_limits<streamsize>::max(), '\n');

        queries[queries_itr] = queries_item;
    }

    vector<vector<int>> result = swapNodes(indexes, queries);

    for (int result_row_itr = 0; result_row_itr < result.size(); result_row_itr++) {
        for (int result_column_itr = 0; result_column_itr < result[result_row_itr].size(); result_column_itr++) {
            fout << result[result_row_itr][result_column_itr];

            if (result_column_itr != result[result_row_itr].size() - 1) {
                fout << " ";
            }
        }

        if (result_row_itr != result.size() - 1) {
            fout << "\n";
        }
    }

    fout << "\n";

    fout.close();

    return 0;
}
